(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: counter
query-maker: "Z3"
query-time: 0.610000 ms
query-class: concrete
query-category: assume
query-type: refine
status: sat
mode: abstract_bv
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-fun prop$next () (_ BitVec 1))
(declare-fun z$28 () (_ BitVec 1))
(declare-fun z$n0s4 () (_ BitVec 4))
(declare-fun X$next () (_ BitVec 4))
(declare-fun z$29 () (_ BitVec 1))
(declare-fun z$30 () (_ BitVec 1))
(declare-fun z$36 () (_ BitVec 1))
(declare-fun z$n1s4 () (_ BitVec 4))
(declare-fun z$38 () (_ BitVec 4))
(declare-fun s$1$next () (_ BitVec 4))
(declare-fun z$90 () (_ BitVec 1))
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(declare-fun p$2 () Bool)
(declare-fun p$3 () Bool)
(assert
 (let (($x82 (= z$28 (ite (= prop$next (_ bv0 1)) (_ bv1 1) (_ bv0 1)))))
 (=> p$0 $x82)))
(assert
 (let (($x86 (= z$28 (_ bv1 1))))
 (=> p$0 $x86)))
(assert
 (let (($x24 (= z$n0s4 (_ bv0 4))))
 (=> p$1 $x24)))
(assert
 (let (($x67 (= z$29 (ite (and (distinct X$next z$n0s4) true) (_ bv1 1) (_ bv0 1)))))
 (=> p$1 $x67)))
(assert
 (let (($x76 (= prop$next z$29)))
 (let ((?x77 (ite $x76 (_ bv1 1) (_ bv0 1))))
 (let (($x78 (= z$30 ?x77)))
 (=> p$1 $x78)))))
(assert
 (let (($x85 (= z$30 (_ bv1 1))))
 (=> p$1 $x85)))
(assert
 (let (($x24 (= z$n0s4 (_ bv0 4))))
 (=> p$2 $x24)))
(assert
 (let (($x122 (= z$36 (ite (= X$next z$n0s4) (_ bv1 1) (_ bv0 1)))))
 (=> p$2 $x122)))
(assert
 (let (($x108 (= z$36 (_ bv1 1))))
 (=> p$2 $x108)))
(assert
 (let (($x12 (= z$n1s4 (_ bv1 4))))
 (=> p$3 $x12)))
(assert
 (=> p$3 (= z$38 (bvadd X$next z$n1s4))))
(assert
 (let (($x350 (= s$1$next z$38)))
 (=> p$3 $x350)))
(assert
 (=> p$3 (= z$90 (ite (= s$1$next z$n1s4) (_ bv1 1) (_ bv0 1)))))
(assert
 (=> p$3 (= z$90 (_ bv1 1))))
(check-sat)
(assert p$0)
(assert p$1)
(assert p$2)
(assert p$3)
(set-info :status sat)
(check-sat)
(exit)
